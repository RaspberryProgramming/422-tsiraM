// import statements for hardware
import { Cpu } from "./hardware/Cpu";
import { Memory } from "./hardware/Memory";
import { Hardware } from "./hardware/Hardware";
import { Clock } from "./hardware/Clock";
import { MMU } from "./hardware/MMU";
import { InterruptController } from "./hardware/InterruptController";
import { Keyboard } from "./hardware/Keyboard";
/*
    Constants
 */
// Initialization Parameters for Hardware
// Clock cycle interval
export const CLOCK_INTERVAL = 50; // This is in ms (milliseconds) so 1000 = 1 second, 100 = 1/10 second
// A setting of 100 is equivalent to 10hz, 1 would be 1,000hz or 1khz,
// .001 would be 1,000,000 or 1mhz. Obviously you will want to keep this
// small, I recommend a setting of 100, if you want to slow things down
// make it larger.

export class System extends Hardware {
  private _CPU: Cpu = null;
  private _MEM: Memory = null;
  private _MMU: MMU = null;
  private _CLOCK: Clock = null;
  private _INTCONTROLLER: InterruptController = null;
  private runcode;

  constructor() {
    super(0, "system");

    /*********************************************************************
     * Create Hardware and copy references to other hardware as necessary
     *********************************************************************/
    this._CLOCK = new Clock(0);
    this._MEM = new Memory(0);
    this._INTCONTROLLER = new InterruptController(0);
    this._MMU = new MMU(0, this._MEM);
    this._CPU = new Cpu(0, this._MMU, this._INTCONTROLLER, this); // Creating Cpu 0

    /******************
     * SETTINGS
     ******************/

    // DEBUG FLAGS
    // Sets whether each device will display debug information
    this._CLOCK.debug=false;
    this._MEM.debug=false;
    this._MMU.debug=false;
    this._CPU.debug=true;
    this._INTCONTROLLER.debug=false;

    // Running Program Code
    this.runcode = 0;


    /*
    Start the system (Analogous to pressing the power button and having voltages flow through the components)
    When power is applied to the system clock, it begins sending pulses to all clock observing hardware
    components so they can act on each clock cycle.
      */

    this.startSystem();
  }

  public startSystem(): boolean {
    // Start System

    // Initialize and Add keyboard to Interrupt Controller
    this._INTCONTROLLER.addDevice(new Keyboard(0, this._INTCONTROLLER));

    // Add listeners
    this._CLOCK.addListener(this._CPU);
    this._CLOCK.addListener(this._MEM);
    this._CLOCK.addListener(this._INTCONTROLLER);

    /***************************************************************************************************************************
     * Installed Programs
     * 
     *   Each program below is a part of the program variable. For example, program 0 is program[0]. As per standard,
     *   each program will have it's program location presented before it's description/title. Above this comment
     *   within the cosntructor is the Settings Section. Under the // Running Program Code is a variable this.runcode
     *   which stores the program you would like to run. The system will load that program into memory after the program
     *   variable is created.
     ***************************************************************************************************************************/

    var program = [ // Start of program array


    // program[0]
    // Title: My Test Program
    // Random Program that tests different instructions. I used this to help debug isa along with cpu debug logs
    [
      0xa9, 0x0d, 0xad, 0x19, 0x00, 0x6D, 0x19, 0x00, 0x8D, 0x18, 0x00, 0xAE, 0x18, 0x00, 0xEC,
      0x1A, 0x00, 0xD0, 0xF2, 0xA2, 0x01, 0xff, 0x00, 0x00, 0x00, 0x10, 0x30,
    ],

    // program[1]
    // Title: My Power's Program
    // This is my Program from Previous Project. It runs a calculator that generates 4 to the power of 2 and outputs result as integer.
    [
      0xA9, 0x04, 0x8D, 0x01, 0x10, 0xA9, 0x02, 0x8D, 0x02, 0x10, 0xA9, 0x01, 0x8D, 0x05, 0x10,
      0xA9, 0x01, 0x8D, 0x03, 0x10, 0xAD, 0x01, 0x10, 0x8D, 0x04, 0x10, 0x8D, 0x06, 0x10, 0xA2,
      0x00, 0xAD, 0x06, 0x10, 0x6D, 0x04, 0x10, 0x8D, 0x04, 0x10, 0xA9, 0x01, 0x6D, 0x03, 0x10,
      0x8D, 0x03, 0x10, 0xAE, 0x01, 0x10, 0xEC, 0x03, 0x10, 0xD0, 0xE7, 0xA9, 0x01, 0x6D, 0x05,
      0x10, 0x8D, 0x05, 0x10, 0xAD, 0x04, 0x10, 0x8D, 0x06, 0x10, 0xA9, 0x01, 0x8D, 0x03, 0x10,
      0xAE, 0x02, 0x10, 0xEC, 0x05, 0x10, 0xD0, 0xCC, 0xA2, 0x01, 0xAC, 0x04, 0x10, 0xFF, 0x00, 
    ],
    
    // program[2]
    // Title: Add 3 and 4 and output
    [
      0xA9, 0x03, 0x8D, 0x18, 0x00, 0xA9, 0x04, 0x6D, 0x18, 0x00, 0x8D, 0x19, 0x00, 0xA2, 0x01,
      0xAC, 0x19, 0x00, 0xFF, 0x00,
    ],

    // program[3]
    // Title: Power Program
    // It will calculate the 2nd power of 5 or 5 to the power of 2 and print to the display
    [
      0xA9, 0x05, 0x8D, 0x01, 0x10, 0xA9, 0x02, 0x8D, 0x02, 0x10, 0xA9, 0x01, 0x8D, 0x05, 0x10,
      0xA9, 0x01, 0x8D, 0x03, 0x10, 0xAD, 0x01, 0x10, 0x8D, 0x04, 0x10, 0x8D, 0x06, 0x10, 0xA2,
      0x00, 0xAD, 0x06, 0x10, 0x6D, 0x04, 0x10, 0x8D, 0x04, 0x10, 0xA9, 0x01, 0x6D, 0x03, 0x10,
      0x8D, 0x03, 0x10, 0xAE, 0x01, 0x10, 0xEC, 0x03, 0x10, 0xD0, 0xE7, 0xA9, 0x01, 0x6D, 0x05,
      0x10, 0x8D, 0x05, 0x10, 0xAD, 0x04, 0x10, 0x8D, 0x06, 0x10, 0xA9, 0x01, 0x8D, 0x03, 0x10,
      0xAE, 0x02, 0x10, 0xEC, 0x05, 0x10, 0xD0, 0xCC, 0xA2, 0x01, 0xAC, 0x04, 0x10, 0xFF, 0x00, 
    ],
    // program[4]
    // Title: Print int and Hello World
    [
      0xA9, 0x0A, 0x8D, 0x40, 0x00, 0xAC, 0x40, 0x00, 0xA2, 0x01, 0xFF, 0xA2, 0x02, 0xFF, 0x50,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x57, 0x6F, 0x72,
      0x6C, 0x64, 0x21, 0x0A
    ],

    // program[5]
    // Title: Simple Loop
    [
      0xA9, 0x05, 0x8D, 0x40, 0x00, 0xA9, 0x01, 0x8D, 0x41, 0x00, 0xA8, 0xA2, 0x01, 0xFF, 0x6D, 
      0x41, 0x00, 0xAA, 0xEC, 0x40, 0x00, 0xD0, 0xF3, 0x00
    ],

    // program[6]
    // Title: Funny
    // Leave debug flags off for best effect
    [
      0xA2, 0x02, 0xFF, 0x06, 0x00, 0x00, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65,
      0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x31, 0x30, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20,
      0x6f, 0x66, 0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x54, 0x68, 0x6f, 0x73, 0x65,
      0x20, 0x77, 0x68, 0x6f, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64,
      0x20, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x6f,
      0x73, 0x65, 0x20, 0x77, 0x68, 0x6f, 0x20, 0x64, 0x6f, 0x6e, 0x74]
    ]; // End of Program Array

    /***************************************************************************************************************************
     * End of Loading Program variable
     ***************************************************************************************************************************/
    
    // Selected program is copied to runningprogram variable
    var runningprogram = program[this.runcode];

    // Running program is loaded into memory
    for (var i = 0x0000; i < runningprogram.length; i++) {
      this._MMU.writeImmediate(i, runningprogram[i]);
    }
    // Memory is dumped as far as the running program was copied.
    // *** The memory will only be dumped if _MEM's debug flag is set to true ***
    this._MMU.memoryDump(0x0000, runningprogram.length);

    this.log("Created");

    /**********************************
     * Start the Clock
     **********************************/
    this._CLOCK.startClock();
    this.log("Clock Started");

    return true;
  }

  public stopSystem(): boolean {
    
    this._CLOCK.stopClock(); // Stop the clock
    process.exit(0); // Exit the process to stop the keyboard stdin process

    return true;
  }
}

let system: System = new System();
